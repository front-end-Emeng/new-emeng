<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huiming.emeng.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="com.huiming.emeng.model.User">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="username" jdbcType="VARCHAR" property="username" />
		<result column="job_id" jdbcType="VARCHAR" property="jobId" />
		<result column="password" jdbcType="VARCHAR" property="password" />
		<result column="school_id" jdbcType="INTEGER" property="schoolId" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="mail" jdbcType="VARCHAR" property="mail" />
		<result column="state" jdbcType="TINYINT" property="state" />
	</resultMap>
	<sql id="Base_Column_List">
		id, username, job_id, password, school_id, phone, mail,
		state
	</sql>
	<select id="countSelective" parameterType="com.huiming.emeng.model.User"
		resultType="java.lang.Integer">
		SELECT count(*)
		FROM user
		<where>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR}
			</if>
			<if test="jobId != null">
				AND job_id = #{jobId,jdbcType=VARCHAR}
			</if>
			<if test="password != null">
				AND password = #{password,jdbcType=VARCHAR}
			</if>
			<if test="schoolId != null">
				AND school_id = #{schoolId,jdbcType=INTEGER}
			</if>
			<if test="phone != null">
				AND phone = #{phone,jdbcType=VARCHAR}
			</if>
			<if test="mail != null">
				AND mail = #{mail,jdbcType=VARCHAR}
			</if>
			<if test="state != null">
				AND state = #{state,jdbcType=TINYINT}
			</if>
		</where>

	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.huiming.emeng.model.User">
		insert into user (id,
		username, job_id,
		password, school_id, phone,
		mail, state)
		values
		(#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR},
		#{jobId,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{schoolId,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR},
		#{mail,jdbcType=VARCHAR}, #{state,jdbcType=TINYINT})
	</insert>
	<insert id="insertSelective" parameterType="com.huiming.emeng.model.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="username != null">
				username,
			</if>
			<if test="jobId != null">
				job_id,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="schoolId != null">
				school_id,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="mail != null">
				mail,
			</if>
			<if test="state != null">
				state,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="username != null">
				#{username,jdbcType=VARCHAR},
			</if>
			<if test="jobId != null">
				#{jobId,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="schoolId != null">
				#{schoolId,jdbcType=INTEGER},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="mail != null">
				#{mail,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=TINYINT},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.huiming.emeng.model.User">
		update user
		<set>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR},
			</if>
			<if test="jobId != null">
				job_id = #{jobId,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="schoolId != null">
				school_id = #{schoolId,jdbcType=INTEGER},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="mail != null">
				mail = #{mail,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=TINYINT},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.huiming.emeng.model.User">
		update user
		set
		username = #{username,jdbcType=VARCHAR},
		job_id =
		#{jobId,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		school_id = #{schoolId,jdbcType=INTEGER},
		phone =
		#{phone,jdbcType=VARCHAR},
		mail = #{mail,jdbcType=VARCHAR},
		state =
		#{state,jdbcType=TINYINT}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<select id="selectSelective" resultMap="BaseResultMap">
		select *
		from user
		<where>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR}
			</if>
			<if test="password != null">
				AND password = #{password,jdbcType=VARCHAR}
			</if>
			<if test="state != null">
				AND state = #{state,jdbcType=TINYINT}
			</if>
			<if test="id != null">
				AND id = #{id,jdbcType=INTEGER}
			</if>
		</where>
	</select>
	<select id="selectPagerUserSelective" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		<where>
			<if test="user.username != null">
				username = #{user.username,jdbcType=VARCHAR}
			</if>
			<if test="user.jobId != null">
				AND job_id = #{user.jobId,jdbcType=VARCHAR}
			</if>
			<if test="user.password != null">
				AND password = #{user.password,jdbcType=VARCHAR}
			</if>
			<if test="user.schoolId != null">
				AND school_id = #{user.schoolId,jdbcType=INTEGER}
			</if>
			<if test="user.phone != null">
				AND phone = #{user.phone,jdbcType=VARCHAR}
			</if>
			<if test="user.mail != null">
				AND mail = #{user.mail,jdbcType=VARCHAR}
			</if>
			<if test="user.state != null">
				AND state = #{user.state,jdbcType=TINYINT}
			</if>
		</where>
		limit #{fromIndex},#{pageSize}
	</select>

	<select id="selectPagerUser" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		where state = 1
		limit #{fromIndex},#{pageSize}
	</select>

	<select id="selectAllSelective" parameterType="com.huiming.emeng.model.User"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		<where>
			<if test="username != null">
				username = #{username,jdbcType=VARCHAR}
			</if>
			<if test="jobId != null">
				AND job_id = #{jobId,jdbcType=VARCHAR}
			</if>
			<if test="password != null">
				AND password = #{password,jdbcType=VARCHAR}
			</if>
			<if test="schoolId != null">
				AND school_id = #{schoolId,jdbcType=INTEGER}
			</if>
			<if test="phone != null">
				AND phone = #{phone,jdbcType=VARCHAR}
			</if>
			<if test="mail != null">
				AND mail = #{mail,jdbcType=VARCHAR}
			</if>
			<if test="state != null">
				AND state = #{state,jdbcType=TINYINT}
			</if>
		</where>
	</select>

	<select id="findSelective" parameterType="com.huiming.emeng.model.User"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from user
		<where>
			<if test="user.username != null">
				username like #{user.username,jdbcType=VARCHAR}
			</if>
			<if test="user.jobId != null">
				AND job_id like #{user.jobId,jdbcType=VARCHAR}
			</if>
			<if test="user.password != null">
				AND password like #{user.password,jdbcType=VARCHAR}
			</if>
			<if test="user.schoolId != null">
				AND school_id like #{user.schoolId,jdbcType=INTEGER}
			</if>
			<if test="user.phone != null">
				AND phone like #{user.phone,jdbcType=VARCHAR}
			</if>
			<if test="user.mail != null">
				AND mail like #{user.mail,jdbcType=VARCHAR}
			</if>
			<if test="user.state != null">
				AND state like #{user.state,jdbcType=TINYINT}
			</if>
		</where>
		limit #{fromIndex},#{pageSize}
		</select>
	<select id="selectByJobId" parameterType="java.lang.String" resultMap="BaseResultMap">
		select 
		<include refid="Base_Column_List" />
		from user
		where job_id = #{jobId,jdbcType=VARCHAR}
	</select>
	<select id="selectCount" resultType="java.lang.Integer">
		select count(*)
		from user
		where state = 1
	</select>
</mapper>